import { useState } from "react";
import useResponsesStore from "../../store/useResponsesStore";
import "./CompanyResponseItem.css";

const CompanyResponseItem = ({ response }) => {
    const [isExpanded, setIsExpanded] = useState(false);
    const [message, setMessage] = useState(""); // ‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
    const {approveResponse, rejectResponse} = useResponsesStore()
    
    return (
        <div className="response-card">
            <div className="response-header">
                <div className="applicant-info">
                    <h3>{response.applicant_id.user.name}</h3>
                    <p><strong>Email:</strong> {response.applicant_id.user.contacts.email}</p>
                    <p><strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> {response.applicant_id.user.contacts.phone || "-"}</p>
                    <button className="expand-button" onClick={() => setIsExpanded(!isExpanded)}>
                        {isExpanded ? "–°–∫—Ä—ã—Ç—å" : "–ü–æ–¥—Ä–æ–±–Ω–µ–µ"}
                    </button>
                </div>
                <div className="response-info">
                    <h3>–í–∞–∫–∞–Ω—Å–∏—è: {response.vacancy_id.name}</h3>
                    <p><strong>–í–∞–∫–∞–Ω—Å–∏—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞:</strong> {new Date(response.vacancy_id.createdAt).toLocaleDateString()}</p>
                    <p><strong>–û—Ç–∫–ª–∏–∫ —Å–¥–µ–ª–∞–Ω:</strong> {new Date(response.createdAt).toLocaleDateString()}</p>
                </div>
            </div>

            {isExpanded && (
                <div className="response-details">
                    <h3>–†–µ–∑—é–º–µ: {response.resume_id.name}</h3>
                    <p><strong>–ë–∏–æ–≥—Ä–∞—Ñ–∏—è:</strong> {response.resume_id.biography}</p>
                    <p><strong>–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:</strong></p>
                    <ul>
                        {response.resume_id.work_experience.map((exp) => (
                            <li key={exp._id}>
                                <strong>{exp.company}</strong> ‚Äî {exp.position} ({exp.years_of_work || "–°—Ä–æ–∫ –Ω–µ —É–∫–∞–∑–∞–Ω"})
                            </li>
                        ))}
                    </ul>
                    <p><strong>–ù–∞–≤—ã–∫–∏:</strong> {response.resume_id.skills.join(", ")}</p>
                </div>
            )}

            <div className="response-actions">
                {response.is_approved === null ? (
                    <>
                    {/* üîπ –í–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è */}
                        <textarea 
                            placeholder="–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –æ—Ç–∫–ª–∏–∫—É..." 
                            value={message} 
                            onChange={(e) => setMessage(e.target.value)} 
                        ></textarea>
                        <div>
                            <button className="approve-button" onClick={() => approveResponse(response._id, message)}>–û–¥–æ–±—Ä–∏—Ç—å</button>
                            <button className="reject-button" onClick={() => rejectResponse(response._id, message)}>–û—Ç–∫–ª–æ–Ω–∏—Ç—å</button>
                        </div>
                    </>
                ) : (
                    <button className="sent-button" disabled>–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω</button>
                )}
            </div>

            {/* üîπ –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å */}
            {response.applicant_pinned_message && (
                <div className="pinned-message">
                    <strong>–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è:</strong> {response.applicant_pinned_message}
                </div>
            )}
            {response.employer_pinned_message && (
                <div className="pinned-message">
                    <strong>–°–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è:</strong> {response.employer_pinned_message}
                </div>
            )}
        </div>
    );
};

export default CompanyResponseItem;
